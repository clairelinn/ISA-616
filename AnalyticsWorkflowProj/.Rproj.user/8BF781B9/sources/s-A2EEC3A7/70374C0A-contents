---
title: "Happiness Analysis"
author: "Claire Linn"
date: "`r format(Sys.Date(), '%B %d, %Y')`"
bibliography: refs.bib
output: 
  html_document:
    code_folding: show
    df_print: paged
    number_sections: yes
    theme: cerulean
    toc: yes
    toc_float: yes
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      cache=TRUE,
                      out.width="100%",
                      warning=FALSE,
                      message=FALSE,
                      clean_cache=TRUE)
```

# Happiness Analytics Workflow

## Introduction

In this analysis I have performed regression of the Happiness data that can be found at www.dfhahiuahrlgiehrgui. (cite source HERE). The happiness data is collected in 166 countries in order to objectively quantify peoples happiness throughout the world. During this process, I have cleaned the data, created a simple multiple regression analysis, evaluated which predictors are most important for predicting any countries Happiness score, and then displayed them in an easily readable graph.

## Reading and cleaning the Happiness data

### First, Read in the Happiness Data, be sure to read the strings as factors, so that each country name is not its own predictor. 
```{r}
happy<- read.csv("HappyData.csv", stringsAsFactors = TRUE)
```

### Next, we will load all of the packages needed for out output and view some summaries of the Happiness data using the DataExplorer package.

```{r}

#install.packages("DataExplorer")
#install.packages("tidyverse")
#library(ggplot2)
#library(caret)
#library(tidyverse)
#library(DataExplorer)
#library(dplyr)

```

```{r}
introduce(happy)
plot_intro
plot_missing(happy)
class(happy)
str(happy)
plot_str(happy)
head(happy)
```


### We want to remove columns that have more than 50% of the data missing, based on the plot above, we should remove several columns.

```{r}
happy<- select (happy, -"Most.people.can.be.trusted..WVS.round.2010.2014",
                -"Most.people.can.be.trusted..WVS.round.2005.2009",
                -"Most.people.can.be.trusted..WVS.round.1999.2004",
                -"Most.people.can.be.trusted..WVS.round.1994.1998",
                -"Most.people.can.be.trusted..WVS.round.1989.1993",
                -"Most.people.can.be.trusted..WVS.round.1981.1984",
                -"Most.people.can.be.trusted..Gallup",
                -"gini.of.household.income.reported.in.Gallup..by.wp5.year",
                -"GINI.index..World.Bank.estimate...average.2000.2017..unbalanced.panel",
                -"GINI.index..World.Bank.estimate.")
```

### Let's take another look at the missing data, it is clear we need to do something with the rest of the NA rows.

```{r}
plot_missing(happy)
```

### I chose to impute with the mean. Once this is done, we will look at the data again to ensure that the data is not missing.

```{r}
# impute Confidence.in.national.government
summary(happy$Confidence.in.national.government)
happy$Confidence.in.national.government_M<-as.factor(ifelse(is.na(happy$Confidence.in.national.government), 1, 0))
summary(happy$Confidence.in.national.government_M)
happy$Confidence.in.national.government[is.na(happy$Confidence.in.national.government)]<-mean(happy$Confidence.in.national.government, na.rm=TRUE)
summary(happy$Confidence.in.national.government)
happy<- select(happy, -"Confidence.in.national.government_M")

# impute Democratic.Quality
summary(happy$Democratic.Quality)
happy$Democratic.Quality_M<-as.factor(ifelse(is.na(happy$Democratic.Quality), 1, 0))
summary(happy$Democratic.Quality_M)
happy$Democratic.Quality[is.na(happy$Democratic.Quality)]<-mean(happy$Democratic.Quality, na.rm=TRUE)
summary(happy$Democratic.Quality)
happy<- select(happy, -"Democratic.Quality_M")

# impute Delivery.Quality
summary(happy$Delivery.Quality)
happy$Delivery.Quality_M<-as.factor(ifelse(is.na(happy$Delivery.Quality), 1, 0))
summary(happy$Delivery.Quality_M)
happy$Delivery.Quality[is.na(happy$Delivery.Quality)]<-mean(happy$Delivery.Quality, na.rm=TRUE)
summary(happy$Delivery.Quality)
happy<- select(happy, -"Delivery.Quality_M")

# impute Perceptions.if.corruption
summary(happy$Perceptions.of.corruption)
happy$Perceptions.of.corruption_M<-as.factor(ifelse(is.na(happy$Perceptions.of.corruption), 1, 0))
summary(happy$Perceptions.of.corruption_M)
happy$Perceptions.of.corruption[is.na(happy$Perceptions.of.corruption)]<-mean(happy$Perceptions.of.corruption, na.rm=TRUE)
summary(happy$Perceptions.of.corruption)
happy<- select(happy, -"Perceptions.of.corruption_M")

# impute Generousity
summary(happy$Generosity)
happy$Generousity_M<-as.factor(ifelse(is.na(happy$Generosity), 1, 0))
summary(happy$Generousity_M)
happy$Generosity[is.na(happy$Generosity)]<-mean(happy$Generosity, na.rm=TRUE)
summary(happy$Generosity)
happy<- select(happy, -"Generousity_M")

# impute Healthy.life.expectancy.at.birth
summary(happy$Healthy.life.expectancy.at.birth)
happy$healthy_M<-as.factor(ifelse(is.na(happy$Healthy.life.expectancy.at.birth), 1, 0))
summary(happy$healthy_M)
happy$Healthy.life.expectancy.at.birth[is.na(happy$Healthy.life.expectancy.at.birth)]<-mean(happy$Healthy.life.expectancy.at.birth, na.rm=TRUE)
summary(happy$Healthy.life.expectancy.at.birth)
happy<- select(happy, -"healthy_M")

# impute Freedom.to.make.life.choices
summary(happy$Freedom.to.make.life.choices)
happy$freedom_M<-as.factor(ifelse(is.na(happy$Freedom.to.make.life.choices), 1, 0))
summary(happy$freedom_M)
happy$Freedom.to.make.life.choices[is.na(happy$Freedom.to.make.life.choices)]<-mean(happy$Freedom.to.make.life.choices, na.rm=TRUE)
summary(happy$Freedom.to.make.life.choices)
happy<- select(happy, -"freedom_M")

# impute Log.GPD.per.capita
summary(happy$Log.GDP.per.capita)
happy$log_M<-as.factor(ifelse(is.na(happy$Log.GDP.per.capita), 1, 0))
summary(happy$log_M)
happy$Log.GDP.per.capita[is.na(happy$Log.GDP.per.capita)]<-mean(happy$Log.GDP.per.capita, na.rm=TRUE)
summary(happy$Log.GDP.per.capita)
happy<- select(happy, -"log_M")

# impute Positvie.affect
summary(happy$Positive.affect)
happy$positive_M<-as.factor(ifelse(is.na(happy$Positive.affect), 1, 0))
summary(happy$positive_M)
happy$Positive.affect[is.na(happy$Positive.affect)]<-mean(happy$Positive.affect, na.rm=TRUE)
summary(happy$Positive.affect)
happy<- select(happy, -"positive_M")

# impute Negative.affect
summary(happy$Negative.affect)
happy$negative_M<-as.factor(ifelse(is.na(happy$Negative.affect), 1, 0))
summary(happy$negative_M)
happy$Negative.affect[is.na(happy$Negative.affect)]<-mean(happy$Negative.affect, na.rm=TRUE)
summary(happy$Negative.affect)
happy<- select(happy, -"negative_M")

# impute Social.support
summary(happy$Social.support)
happy$social_M<-as.factor(ifelse(is.na(happy$Social.support), 1, 0))
summary(happy$social_M)
happy$Social.support[is.na(happy$Social.support)]<-mean(happy$Social.support, na.rm=TRUE)
summary(happy$Social.support)
happy<- select(happy, -"social_M")

plot_missing(happy)
```

## Our multiple regression summary output.

```{r}
#remove country.name because the name is not a predictor of the happiness score
happy.preds<-select(happy,-"Country.name")

set.seed(13)
lm.model <- lm(Life.Ladder~. , data=happy.preds)
summary(lm.model)
```

### A visual that displays the most important variables in predicting people's happiness!

```{r}
varImp(lm.model)

#list of variables used in the model
fname<-c("year", "Log.GDP.per.capita", "Social.support", "Healthy.life.expectancy.at.birth",
         "Freedom.to.make.life.choices","Generousity","Perceptions.of.corruption","Positive.affect",
         "Negative.affect", "Confidence.in.national.government","Democratic.Quality","Delivery.Quality",
         "Standard.deviation.of.ladder.by.country.year","Standard.deviation.Mean.of.Ladder.by.country.year")

#corresponding variable importance of each variable
score<-c(1.659665, 9.141023, 3.384381, 1.918980,
         2.400348, 7.780425, 15.198471, 6.231466,
         4.828223, 4.678699, 2.685804, 3.064541, 49.313031, 64.852818)
dat<-data.frame(fname,score)
order.scores<-order(dat$score,dat$fname)
dat1<-dat[order.scores,]


#chart that shows overall importance of scores based on dat1 (for all countries)
lollipop<- ggplot(dat1, aes(fname,score))+
  geom_point(aes(x=fname, y=score, size=score, color=fname), data=dat1)+
  labs(x="Predictor Column", y="Importance of Predictor", title = "Overall Importance of Predictors of Happiness")+
  theme_classic(
  )+
  geom_linerange(aes(x=fname, ymin=0, ymax= score, color=fname),
                  size = 5)+
  theme(axis.text.x = element_text(angle=45))

lollipop
```


